C51 COMPILER V9.60.0.0   CMD                                                               12/04/2020 18:47:02 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE CMD
OBJECT MODULE PLACED IN .\cmd.OBJ
COMPILER INVOKED BY: d:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe F:\simplicity_st
                    -udo_workspace_v5\F31x_Blinky\cmd.c OMF2 COMPACT DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,S
                    -PEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(D:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.1.7//Device/shared/s
                    -i8051Base;D:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.1.7//Device/C8051F310/inc) PRINT(.\cmd.lst) COND PAG
                    -EWIDTH(120) PAGELENGTH(65) OBJECT(.\cmd.OBJ)

line level    source

   1          /*
   2           * cmd.c
   3           *
   4           *  Created on: 2020年1月27日
   5           *      Author: wrangler
   6           */
   7          
   8          #include <SI_C8051F310_Register_Enums.h>
   9          #include "./src/uart.h"
  10          #include "cmd.h"
  11          
  12          //cmd format
  13          //0-1 eb 90
  14          //2-5 ftw_lower_1
  15          //6-9 ftw_upper_1
  16          //10-13 ftw_lower_2
  17          //14-17 ftw_upper_2
  18          //18-21 step
  19          //22-23 rate
  20          //24-25 pulse_period,us
  21          //26-28 re-sweep period,us
  22          //29 tx衰减
  23          //30 bit0~bit2系统模式 001-tv,010-th/tv切换,011-th/tv固定,100-一发三收,bit3-射频开关
  24          //31-33 rx三个接收通道衰减
  25          //34-36 rx三个接收通道移相控制
  26          //37~40 校准时长,ms
  27          //41~44 触发延迟,us
  28          //45 crc
  29          
  30          idata unsigned char cmd_msg[CMD_MSG_LEN] = {0xeb,0x90};
  31          unsigned char cmd_msg_valid = 0;
  32          
  33          unsigned char packet_buff[ASCII_FRAME_LEN];
  34          unsigned char packet_buff_size = 0;
  35          
  36          double step_scale = 4294967296.0 / 3400.0;//2^32/fs
  37          double clock_scale = 24.0 / 3400.0;  //us
  38          
  39          unsigned long freq_modulate = 20;//MHz/us
  40          unsigned long freq_sweep_bw = 250;//us
  41          double freq_mid = 1000.0;//MHz
  42          
  43          extern unsigned char spi_cmd_send_complete;
  44          
  45          //求最大公约数
  46          unsigned long gcd(unsigned long x, unsigned long y)
  47          {
  48   1              unsigned long gcdNum = 1;
  49   1              while (x != y)
  50   1              {
  51   2                      if (x % 2 == 0 && y % 2 == 0)
  52   2                      {
C51 COMPILER V9.60.0.0   CMD                                                               12/04/2020 18:47:02 PAGE 2   

  53   3                              x /= 2;
  54   3                              y /= 2;
  55   3                              gcdNum *= 2;
  56   3                      }
  57   2                      else
  58   2                      {
  59   3                              if (x > y)
  60   3                                      x -= y;
  61   3                              else
  62   3                                      y -= x;
  63   3                      }
  64   2              }
  65   1              return gcdNum * x;
  66   1      }
  67          
  68          //字符串转数值
  69          unsigned long String2Long(unsigned char* buf,unsigned char dec)
  70          {
  71   1              unsigned char i;
  72   1              unsigned long res=0,var,temp = 1;
  73   1              for(i=0;i<dec;i++)
  74   1              {
  75   2                      var = buf[dec - i - 1] - 0x30;
  76   2                      var *= temp;
  77   2                      res += var;
  78   2      
  79   2                      temp *= 10;
  80   2              }
  81   1      
  82   1              return res;
  83   1      }
  84          
  85          //32位转换位数组
  86          void Format2Cmd(unsigned char* cmd,unsigned long var,unsigned char byte_width)
  87          {
  88   1        if(byte_width == 4)
  89   1        {
  90   2            cmd[0] = ((var & 0xff000000) >> 24);
  91   2            cmd[1] = ((var & 0xff0000) >> 16);
  92   2            cmd[2] = ((var & 0xff00) >> 8);
  93   2            cmd[3] = var;
  94   2        }
  95   1        else if(byte_width == 3)
  96   1        {
  97   2            cmd[0] = ((var & 0xff0000) >> 16);
  98   2            cmd[1] = ((var & 0xff00) >> 8);
  99   2            cmd[2] = var;
 100   2        }
 101   1        else
 102   1        {
 103   2            cmd[0] = ((var & 0xff00) >> 8);
 104   2            cmd[1] = var;
 105   2        }
 106   1      }
 107          
 108          //FTW计算
 109          void FTWGen(double freq,unsigned char* cmd_msg)
 110          {
 111   1              unsigned long ftw=0,div;
 112   1              double temp,m,n;
 113   1      
 114   1              //整数频率
 115   1              temp = freq_sweep_bw;
C51 COMPILER V9.60.0.0   CMD                                                               12/04/2020 18:47:02 PAGE 3   

 116   1              temp = temp / 2.0;
 117   1              temp = freq - temp;
 118   1              temp *= 10;
 119   1              div = gcd(temp,34000);
 120   1              m = temp / div;
 121   1              n = 34000 / div;
 122   1              temp = 65536.0 / n;
 123   1              temp *= 65536.0;
 124   1              temp *= m;
 125   1              ftw = temp;
 126   1              cmd_msg[0] = ((ftw & 0xff000000) >> 24);
 127   1              cmd_msg[1] = ((ftw & 0xff0000) >> 16);
 128   1              cmd_msg[2] = ((ftw & 0xff00) >> 8);
 129   1              cmd_msg[3] = ftw;
 130   1      
 131   1              temp = freq_sweep_bw;
 132   1              temp = temp / 2.0;
 133   1              temp = freq + temp;
 134   1              temp *= 10;
 135   1              div = gcd(temp,34000);
 136   1              m = temp / div;
 137   1              n = 34000 / div;
 138   1              temp = 65536.0 / n;
 139   1              temp *= 65536.0;
 140   1              temp *= m;
 141   1              ftw = temp;
 142   1              cmd_msg[4] = ((ftw & 0xff000000) >> 24);
 143   1              cmd_msg[5] = ((ftw & 0xff0000) >> 16);
 144   1              cmd_msg[6] = ((ftw & 0xff00) >> 8);
 145   1              cmd_msg[7] = ftw;
 146   1      }
 147          
 148          void BuffDel(unsigned char len)
 149          {
 150   1              unsigned char i;
 151   1              packet_buff_size -= len;
 152   1              for(i=0;i<packet_buff_size;i++)
 153   1                packet_buff[i] = packet_buff[i+len];
 154   1      }
 155          
 156          //计算累加和校验
 157          void CmdCrcCalc()
 158          {
 159   1              unsigned char i;
 160   1              cmd_msg[CMD_MSG_LEN-1] = 0;
 161   1              for(i=0;i<CMD_MSG_LEN-1;i++)
 162   1                      cmd_msg[CMD_MSG_LEN-1] += cmd_msg[i];
 163   1      }
 164          
 165          unsigned char FrameHeaderSearch()
 166          {
 167   1        unsigned char i=0;
 168   1        while(i+3<packet_buff_size)
 169   1        {
 170   2            if((packet_buff[i] != '#')
 171   2                || (packet_buff[i+1] != 'K')
 172   2                || (packet_buff[i+2] != 'R')
 173   2                || (packet_buff[i+3] != ':'))
 174   2            {
 175   3              i++;
 176   3              continue;
 177   3            }
 178   2      
C51 COMPILER V9.60.0.0   CMD                                                               12/04/2020 18:47:02 PAGE 4   

 179   2            break;
 180   2        }
 181   1      
 182   1        return i;
 183   1      }
 184          
 185          //ASCII命令转二进制命令
 186          unsigned char Frame2CmdConvert()
 187          {
 188   1              unsigned char len;
 189   1      
 190   1      //      len = UART_GetBuff(packet_buff + packet_buff_size,ASCII_FRAME_LEN-packet_buff_size);
 191   1      //      packet_buff_size += len;
 192   1      
 193   1              if(packet_buff_size < ASCII_FRAME_LEN)
 194   1                      return 0;
 195   1      
 196   1              if(spi_cmd_send_complete != 1)
 197   1                return 0;
 198   1      
 199   1              len = FrameHeaderSearch();
 200   1              if(len != 0)
 201   1              {
 202   2                BuffDel(len);
 203   2                return 0;
 204   2              }
 205   1      
 206   1              if(KRParser(packet_buff) == 0)
 207   1              {
 208   2                      packet_buff_size = 0;
 209   2                      return 0;
 210   2              }
 211   1      
 212   1              if(FreqParser(packet_buff+11) == 0)
 213   1              {
 214   2                      packet_buff_size = 0;
 215   2                      return 0;
 216   2              }
 217   1      
 218   1              if(PWParser(packet_buff+22) == 0)
 219   1              {
 220   2                      packet_buff_size = 0;
 221   2                      return 0;
 222   2              }
 223   1      
 224   1              if(PRTParser(packet_buff+34) == 0)
 225   1              {
 226   2                      packet_buff_size = 0;
 227   2                      return 0;
 228   2              }
 229   1      
 230   1              if(ATTParser(packet_buff+47) == 0)
 231   1              {
 232   2                      packet_buff_size = 0;
 233   2                      return 0;
 234   2              }
 235   1      
 236   1              if(RFParser(packet_buff+62) == 0)
 237   1              {
 238   2                      packet_buff_size = 0;
 239   2                      return 0;
 240   2              }
 241   1      
C51 COMPILER V9.60.0.0   CMD                                                               12/04/2020 18:47:02 PAGE 5   

 242   1              if(MODParser(packet_buff+68) == 0)
 243   1              {
 244   2                      packet_buff_size = 0;
 245   2                      return 0;
 246   2              }
 247   1      
 248   1              if(CTParser(packet_buff+75) == 0)
 249   1              {
 250   2                      packet_buff_size = 0;
 251   2                      return 0;
 252   2              }
 253   1      
 254   1              if(AAParser(packet_buff+86,31) == 0)
 255   1              {
 256   2                      packet_buff_size = 0;
 257   2                      return 0;
 258   2              }
 259   1      
 260   1              if(PSParser(packet_buff+94,34) == 0)
 261   1              {
 262   2                      packet_buff_size = 0;
 263   2                      return 0;
 264   2              }
 265   1      
 266   1              if(AAParser(packet_buff+102,32) == 0)
 267   1              {
 268   2                      packet_buff_size = 0;
 269   2                      return 0;
 270   2              }
 271   1      
 272   1              if(PSParser(packet_buff+110,35) == 0)
 273   1              {
 274   2                      packet_buff_size = 0;
 275   2                      return 0;
 276   2              }
 277   1      
 278   1              if(AAParser(packet_buff+118,33) == 0)
 279   1              {
 280   2                      packet_buff_size = 0;
 281   2                      return 0;
 282   2              }
 283   1      
 284   1              if(PSParser(packet_buff+126,36) == 0)
 285   1              {
 286   2                      packet_buff_size = 0;
 287   2                      return 0;
 288   2              }
 289   1      
 290   1              if(YSParser(packet_buff+140) == 0)
 291   1              {
 292   2                      packet_buff_size = 0;
 293   2                      return 0;
 294   2              }
 295   1      
 296   1              packet_buff_size = 0;
 297   1      
 298   1        FTWGen(freq_mid,cmd_msg+2);
 299   1        FTWGen(freq_mid+2.5,cmd_msg+10);
 300   1        CmdCrcCalc();
 301   1      
 302   1        cmd_msg_valid = 1;
 303   1              return 1;
 304   1      }
C51 COMPILER V9.60.0.0   CMD                                                               12/04/2020 18:47:02 PAGE 6   

 305          
 306          unsigned char KRParser(unsigned char* buf)
 307          {
 308   1        unsigned long var;
 309   1      
 310   1        if((buf[0] != '#')
 311   1              || (buf[1] != 'K')
 312   1              || (buf[2] != 'R')
 313   1              || (buf[3] != ':')
 314   1              || (buf[10] != ';'))
 315   1          return 0;
 316   1      
 317   1        var = String2Long(buf+4,6);
 318   1        var /= 32768;
 319   1        freq_modulate = var;
 320   1      
 321   1        return 1;
 322   1      }
 323          
 324          unsigned char FreqParser(unsigned char* buf)
 325          {
 326   1        unsigned long var;
 327   1      
 328   1        if((buf[0] != '#')
 329   1                || (buf[1] != 'F')
 330   1                || (buf[2] != 'R')
 331   1                || (buf[3] != 'Q')
 332   1                || (buf[4] != ':')
 333   1                || (buf[10] != ';'))
 334   1          return 0;
 335   1      
 336   1        var = String2Long(buf+5,5);
 337   1        var -= 13500;
 338   1        var /= 4;
 339   1      
 340   1        freq_mid = var;
 341   1        return 1;
 342   1      }
 343          
 344          unsigned char PWParser(unsigned char* buf)
 345          {
 346   1              unsigned long var;
 347   1              double fvar;
 348   1      
 349   1              if((buf[0] != '#')
 350   1                      || (buf[1] != 'P')
 351   1                      || (buf[2] != 'W')
 352   1                      || (buf[3] != ':')
 353   1                      || (buf[11] != ';'))
 354   1                      return 0;
 355   1      
 356   1              var = String2Long(buf+4,7);
 357   1              Format2Cmd(cmd_msg+24,var,2);
 358   1      
 359   1              freq_sweep_bw = freq_modulate * var;
 360   1              freq_sweep_bw /= 4;
 361   1      
 362   1              fvar = var / clock_scale;
 363   1              fvar = freq_sweep_bw / fvar;
 364   1              var = fvar * step_scale;
 365   1              Format2Cmd(cmd_msg+18,var,4);
 366   1      
 367   1              cmd_msg[22] = 0x00;
C51 COMPILER V9.60.0.0   CMD                                                               12/04/2020 18:47:02 PAGE 7   

 368   1              cmd_msg[23] = 0x01;
 369   1      
 370   1              return 1;
 371   1      }
 372          
 373          unsigned char PRTParser(unsigned char * buf)
 374          {
 375   1              unsigned long var;
 376   1      
 377   1              if((buf[0] != '#')
 378   1                              || (buf[1] != 'P')
 379   1                              || (buf[2] != 'R')
 380   1                              || (buf[3] != 'T')
 381   1                              || (buf[4] != ':')
 382   1                              || (buf[12] != ';'))
 383   1                      return 0;
 384   1      
 385   1        var = String2Long(buf+5,7);
 386   1        //var /= clock_scale;
 387   1        Format2Cmd(cmd_msg+26,var,3);
 388   1      
 389   1        return 1;
 390   1      }
 391          
 392          unsigned char ATTParser(unsigned char* buf)
 393          {
 394   1              unsigned long var;
 395   1      
 396   1              if((buf[0] != '#')
 397   1                    || (buf[1] != 'A')
 398   1                    || (buf[2] != 'T')
 399   1                    || (buf[3] != 'T')
 400   1                    || (buf[4] != ':')
 401   1                    || (buf[7] != ';'))
 402   1                      return 0;
 403   1      
 404   1      
 405   1        var = String2Long(buf+5,2);
 406   1        if(var > 17)
 407   1          var = 17;
 408   1      
 409   1        if(var == 0)
 410   1          var += 3;
 411   1        else var += 14;
 412   1      
 413   1        var = (var << 1);
 414   1      
 415   1        cmd_msg[29] = var;
 416   1        cmd_msg[29] = ~cmd_msg[29];
 417   1        return 1;
 418   1      }
 419          
 420          unsigned char RFParser(unsigned char* buf)
 421          {
 422   1              if((buf[0] != '#')
 423   1                              || (buf[1] != 'R')
 424   1                              || (buf[2] != 'F')
 425   1                              || (buf[3] != ':')
 426   1                              || (buf[5] != ';'))
 427   1                      return 0;
 428   1      
 429   1              if(buf[4] == '1')
 430   1              {
C51 COMPILER V9.60.0.0   CMD                                                               12/04/2020 18:47:02 PAGE 8   

 431   2                  cmd_msg[30] |= 0x08;
 432   2                  P1 |= 0x08;
 433   2              }
 434   1              else
 435   1              {
 436   2                  cmd_msg[30] &= ~0x08;
 437   2                  P1 &= ~0x08;
 438   2              }
 439   1      
 440   1              return 1;
 441   1      }
 442          
 443          unsigned char MODParser(unsigned char* buf)
 444          {
 445   1              if((buf[0] != '#')
 446   1                    || (buf[1] != 'M')
 447   1                    || (buf[2] != 'O')
 448   1                    || (buf[3] != 'D')
 449   1                    || (buf[4] != ':')
 450   1                    || (buf[6] != ';'))
 451   1                        return 0;
 452   1      
 453   1        cmd_msg[30] &= ~0x07;
 454   1        if(buf[5] == '1')
 455   1        {
 456   2          cmd_msg[30] |= 0x01;//一发一收tv
 457   2        }
 458   1        else if(buf[5] == '2')
 459   1        {
 460   2          cmd_msg[30] |= 0x02;//一发两收tr/tv
 461   2        }
 462   1        else if(buf[5] == '3')
 463   1        {
 464   2          cmd_msg[30] |= 0x03;//一发两收tr+tv
 465   2        }
 466   1        else if(buf[5] == '4')
 467   1        {
 468   2          cmd_msg[30] |= 0x04;//一发三收
 469   2        }
 470   1      
 471   1        return 1;
 472   1      }
 473          
 474          unsigned char CTParser(unsigned char* buf)
 475          {
 476   1              unsigned long var;
 477   1              //double fvar;
 478   1      
 479   1              if((buf[0] != '#')
 480   1                              || (buf[1] != 'C')
 481   1                              || (buf[2] != 'T')
 482   1                              || (buf[3] != ':')
 483   1                              || (buf[10] != ';'))
 484   1                      return 0;
 485   1      
 486   1              var = String2Long(buf+4,6);
 487   1              var *= 100;
 488   1              Format2Cmd(cmd_msg+37,var,4);
 489   1      
 490   1              return 1;
 491   1      }
 492          
 493          unsigned char AAParser(unsigned char* buf,unsigned char index)
C51 COMPILER V9.60.0.0   CMD                                                               12/04/2020 18:47:02 PAGE 9   

 494          {
 495   1              unsigned long var;
 496   1      
 497   1              if((buf[0] != '#')
 498   1                              || (buf[1] != 'A')
 499   1                              || (buf[2] != 'A')
 500   1                              /*|| (buf[3] != 'A')*/
 501   1                              || (buf[4] != ':')
 502   1                              || (buf[7] != ';'))
 503   1                      return 0;
 504   1      
 505   1              var = String2Long(buf+5,2);
 506   1              if(var > 40)
 507   1                var = 40;
 508   1      
 509   1              var *= 25;
 510   1              var = 1000 - var;
 511   1              var /= 39;
 512   1              cmd_msg[index] = var;
 513   1      
 514   1              return 1;
 515   1      }
 516          
 517          unsigned char PSParser(unsigned char* buf,unsigned char index)
 518          {
 519   1              unsigned long var;
 520   1      
 521   1              if((buf[0] != '#')
 522   1                              || (buf[1] != 'P')
 523   1                              || (buf[2] != 'S')
 524   1                              /*|| (buf[3] != 'A')*/
 525   1                              || (buf[4] != ':')
 526   1                              || (buf[7] != ';'))
 527   1                      return 0;
 528   1      
 529   1              var = String2Long(buf+5,2);
 530   1              cmd_msg[index] = var;
 531   1      
 532   1              return 1;
 533   1      }
 534          
 535          unsigned char YSParser(unsigned char* buf)
 536          {
 537   1              unsigned long var;
 538   1              //double fvar;
 539   1      
 540   1              if((buf[0] != '#')
 541   1                      || (buf[1] != 'Y')
 542   1                      || (buf[2] != 'S')
 543   1                      || (buf[3] != ':')
 544   1                      || (buf[6] != ';'))
 545   1                      return 0;
 546   1      
 547   1        var = String2Long(buf+4,2);
 548   1      //  fvar = var;
 549   1      //  fvar /= clock_scale;
 550   1      //  var = fvar;
 551   1        Format2Cmd(cmd_msg+41,var,4);
 552   1      
 553   1        return 1;
 554   1      }
 555          
 556          
C51 COMPILER V9.60.0.0   CMD                                                               12/04/2020 18:47:02 PAGE 10  



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3625    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =    169      94
   DATA SIZE        =   ----    ----
   IDATA SIZE       =     46    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
