C51 COMPILER V9.60.0.0   CMD                                                               02/14/2020 17:19:11 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE CMD
OBJECT MODULE PLACED IN .\cmd.OBJ
COMPILER INVOKED BY: d:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.60\BIN\C51.exe F:\simplicity_st
                    -udo_workspace\F31x_Blinky\cmd.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED)
                    - INTVECTOR(0X0000) INTPROMOTE INCDIR(D:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/shared/si8051
                    -Base;D:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/C8051F310/inc) PRINT(.\cmd.lst) COND PAGEWIDT
                    -H(120) PAGELENGTH(65) OBJECT(.\cmd.OBJ)

line level    source

   1          /*
   2           * cmd.c
   3           *
   4           *  Created on: 2020年1月27日
   5           *      Author: wrangler
   6           */
   7          #include "./src/uart.h"
   8          #include "cmd.h"
   9          
  10          //cmd format
  11          //0-1 eb 90
  12          //2-5 ftw_lower_1
  13          //6-9 ftw_upper_1
  14          //10-13 ftw_lower_2
  15          //14-17 ftw_upper_2
  16          //18-21 step
  17          //22-23 rate
  18          //24-27 re-sweep period
  19          //28 tx衰减
  20          //29 系统模式， bit0-tv，bit1-th，01-tv,11-tr/tv切换,bit2-射频开关
  21          //30 rx三个接收通道供电控制，bit0-通道1，bit1-通道2，bit2-通道3
  22          //31-33 rx三个接收通道衰减
  23          //34-36 rx三个接收通道移相控制
  24          //37 预留
  25          //38 预留
  26          //39 crc
  27          
  28          idata unsigned char cmd_msg[40] = {0xeb,0x90};
  29          
  30          unsigned char Uart_buff[15];
  31          unsigned char Uart_buff_size = 0;
  32          
  33          float step_scale = 4294967296.0 / 3400.0;//2^32/fs
  34          float clock_scale = 24.0 / 3400.0;  //us
  35          
  36          //求最大公约数
  37          unsigned long gcd(unsigned long x, unsigned long y)
  38          {
  39   1              unsigned long gcdNum = 1;
  40   1              while (x != y)
  41   1              {
  42   2                      if (x % 2 == 0 && y % 2 == 0)
  43   2                      {
  44   3                              x /= 2;
  45   3                              y /= 2;
  46   3                              gcdNum *= 2;
  47   3                      }
  48   2                      else
  49   2                      {
  50   3                              if (x > y)
  51   3                                      x -= y;
  52   3                              else
C51 COMPILER V9.60.0.0   CMD                                                               02/14/2020 17:19:11 PAGE 2   

  53   3                                      y -= x;
  54   3                      }
  55   2              }
  56   1              return gcdNum * x;
  57   1      }
  58          
  59          unsigned long String2Long(unsigned char* buf,unsigned char dec)
  60          {
  61   1              unsigned char i;
  62   1              unsigned long res=0,var,temp = 1;
  63   1              for(i=0;i<dec;i++)
  64   1              {
  65   2                      var = buf[dec - i - 1] - 0x30;
  66   2                      var *= temp;
  67   2                      res += var;
  68   2      
  69   2                      temp *= 10;
  70   2              }
  71   1      
  72   1              return res;
  73   1      }
  74          
  75          void Format2Cmd(unsigned char* cmd,unsigned long var)
  76          {
  77   1              cmd[0] = ((var & 0xff000000) >> 24);
  78   1              cmd[1] = ((var & 0xff0000) >> 16);
  79   1              cmd[2] = ((var & 0xff00) >> 8);
  80   1              cmd[3] = var;
  81   1      }
  82          
  83          void FTWGen(unsigned long freq)
  84          {
  85   1              unsigned long ftw=0,div;
  86   1              float temp,m,n;
  87   1      
  88   1              //整数频率
  89   1              ftw = freq - 125;
  90   1              div = gcd(ftw,3400);
  91   1              m = ftw / div;
  92   1              n = 3400 / div;
  93   1              temp = 65536.0 / n;
  94   1              temp *= 65536.0;
  95   1              temp *= m;
  96   1              ftw = temp;
  97   1              //Format2Cmd(cmd_msg+2,ftw);
  98   1              cmd_msg[2] = ((ftw & 0xff000000) >> 24);
  99   1              cmd_msg[3] = ((ftw & 0xff0000) >> 16);
 100   1              cmd_msg[4] = ((ftw & 0xff00) >> 8);
 101   1              cmd_msg[5] = ftw;
 102   1      
 103   1              ftw = freq + 125;
 104   1              div = gcd(ftw,3400);
 105   1              m = ftw / div;
 106   1              n = 3400 / div;
 107   1              temp = 65536.0 / n;
 108   1              temp *= 65536.0;
 109   1              temp *= m;
 110   1              ftw = temp;
 111   1              //Format2Cmd(cmd_msg+6,ftw);
 112   1              cmd_msg[6] = ((ftw & 0xff000000) >> 24);
 113   1              cmd_msg[7] = ((ftw & 0xff0000) >> 16);
 114   1              cmd_msg[8] = ((ftw & 0xff00) >> 8);
 115   1              cmd_msg[9] = ftw;
C51 COMPILER V9.60.0.0   CMD                                                               02/14/2020 17:19:11 PAGE 3   

 116   1      
 117   1              //小数频率
 118   1              m = freq + 2.5 - 125;
 119   1              ftw = m *10.0;
 120   1              div = gcd(ftw,34000);
 121   1              m = ftw / div;
 122   1              n = 34000 / div;
 123   1              temp = 65536.0 / n;
 124   1              temp *= 65536.0;
 125   1              temp *= m;
 126   1              ftw = temp;
 127   1              //Format2Cmd(cmd_msg+10,ftw);
 128   1              cmd_msg[10] = ((ftw & 0xff000000) >> 24);
 129   1              cmd_msg[11] = ((ftw & 0xff0000) >> 16);
 130   1              cmd_msg[12] = ((ftw & 0xff00) >> 8);
 131   1              cmd_msg[13] = ftw;
 132   1      
 133   1              m = freq + 2.5 + 125;
 134   1              ftw = m * 10.0;
 135   1              div = gcd(ftw,34000);
 136   1              m = ftw / div;
 137   1              n = 34000 / div;
 138   1              temp = 65536.0 / n;
 139   1              temp *= 65536.0;
 140   1              temp *= m;
 141   1              ftw = temp;
 142   1              //Format2Cmd(cmd_msg+14,ftw);
 143   1              cmd_msg[14] = ((ftw & 0xff000000) >> 24);
 144   1              cmd_msg[15] = ((ftw & 0xff0000) >> 16);
 145   1              cmd_msg[16] = ((ftw & 0xff00) >> 8);
 146   1              cmd_msg[17] = ftw;
 147   1      }
 148          
 149          void BuffDel(unsigned char len)
 150          {
 151   1              unsigned char i;
 152   1              Uart_buff_size -= len;
 153   1              for(i=0;i<Uart_buff_size;i++)
 154   1                      Uart_buff[i] = Uart_buff[i+len];
 155   1      }
 156          
 157          void CmdCrcCalc()
 158          {
 159   1              unsigned char i;
 160   1              cmd_msg[39] = 0;
 161   1              for(i=0;i<39;i++)
 162   1                      cmd_msg[39] += cmd_msg[i];
 163   1      }
 164          
 165          unsigned char Frame2CmdConvert()
 166          {
 167   1              unsigned char len;
 168   1              unsigned long var;
 169   1      
 170   1              len = UART_GetBuff(Uart_buff + Uart_buff_size,15-Uart_buff_size);
 171   1              Uart_buff_size += len;
 172   1      
 173   1              if(Uart_buff_size < 4)
 174   1                      return 0;
 175   1      
 176   1              if((Uart_buff[0] == '#')
 177   1                              && (Uart_buff[1] == 'K')
 178   1                              && (Uart_buff[2] == 'R'))
C51 COMPILER V9.60.0.0   CMD                                                               02/14/2020 17:19:11 PAGE 4   

 179   1              {
 180   2                      if(Uart_buff_size < 10)
 181   2                              return 0;
 182   2      
 183   2                      var = String2Long(Uart_buff+4,6);
 184   2                      var /= 32768;
 185   2                      var *= step_scale;
 186   2                      Format2Cmd(cmd_msg+18,var);
 187   2      
 188   2                      len = 10;
 189   2              }
 190   1              else if((Uart_buff[0] == '#')
 191   1                              && (Uart_buff[1] == 'P')
 192   1                              && (Uart_buff[2] == 'W'))
 193   1              {
 194   2                      if(Uart_buff_size < 11)
 195   2                              return 0;
 196   2      
 197   2                      var = String2Long(Uart_buff+4,7);
 198   2                      var /= clock_scale;
 199   2                      cmd_msg[22] = ((var & 0xff00) >> 8);
 200   2                      cmd_msg[23] = var;
 201   2      
 202   2                      len = 11;
 203   2              }
 204   1              else if((Uart_buff[0] == '#')
 205   1                              && (Uart_buff[1] == 'G')
 206   1                              && (Uart_buff[2] == 'N'))
 207   1              {
 208   2                      if(Uart_buff_size < 6)
 209   2                              return 0;
 210   2      
 211   2                      len = 6;
 212   2              }
 213   1              else if((Uart_buff[0] == '#')
 214   1                              && (Uart_buff[1] == 'R')
 215   1                              && (Uart_buff[2] == 'F'))
 216   1              {
 217   2                      if(Uart_buff_size < 5)
 218   2                              return 0;
 219   2                      if(Uart_buff[4] == '1')
 220   2                              cmd_msg[29] |= 0x04;
 221   2                      else cmd_msg[29] &= ~0x04;
 222   2                      len = 5;
 223   2              }
 224   1              else if((Uart_buff[0] == '#')
 225   1                              && (Uart_buff[1] == 'C')
 226   1                              && (Uart_buff[2] == 'T'))
 227   1              {
 228   2                      if(Uart_buff_size < 10)
 229   2                              return 0;
 230   2      
 231   2                      len = 10;
 232   2              }
 233   1              else if((Uart_buff[0] == '#')
 234   1                              && (Uart_buff[1] == 'F')
 235   1                              && (Uart_buff[2] == 'R')
 236   1                              && (Uart_buff[3] == 'Q'))
 237   1              {
 238   2                      if(Uart_buff_size < 10)
 239   2                              return 0;
 240   2      
 241   2                      var = String2Long(Uart_buff+5,5);
C51 COMPILER V9.60.0.0   CMD                                                               02/14/2020 17:19:11 PAGE 5   

 242   2                      var -= 13500;
 243   2                      var /= 4;
 244   2      
 245   2                      FTWGen(var);
 246   2      
 247   2                      len = 10;
 248   2              }
 249   1              else if((Uart_buff[0] == '#')
 250   1                              && (Uart_buff[1] == 'P')
 251   1                              && (Uart_buff[2] == 'R')
 252   1                              && (Uart_buff[3] == 'T'))
 253   1              {
 254   2                      if(Uart_buff_size < 12)
 255   2                              return 0;
 256   2      
 257   2                      var = String2Long(Uart_buff+5,7);
 258   2                      var /= clock_scale;
 259   2                      Format2Cmd(cmd_msg+24,var);
 260   2                      len = 12;
 261   2              }
 262   1              else if((Uart_buff[0] == '#')
 263   1                              && (Uart_buff[1] == 'M')
 264   1                              && (Uart_buff[2] == 'O')
 265   1                              && (Uart_buff[3] == 'D'))
 266   1              {
 267   2                      if(Uart_buff_size < 6)
 268   2                              return 0;
 269   2      
 270   2                      cmd_msg[29] &= ~0x03;
 271   2                      cmd_msg[30] &= ~0x07;
 272   2                      if(Uart_buff[5] == '1')
 273   2                      {
 274   3                              cmd_msg[29] |= 0x01;
 275   3                              cmd_msg[30] |= 0x01;
 276   3                      }
 277   2                      else if(Uart_buff[5] == '2')
 278   2                      {
 279   3                              cmd_msg[29] |= 0x02;
 280   3                              cmd_msg[30] |= 0x03;
 281   3                      }
 282   2                      else if(Uart_buff[5] == '2')
 283   2                      {
 284   3                              cmd_msg[29] |= 0x03;
 285   3                              cmd_msg[30] |= 0x03;
 286   3                      }
 287   2                      else if(Uart_buff[5] == '4')
 288   2                      {
 289   3                              cmd_msg[29] |= 0x01;
 290   3                              cmd_msg[30] |= 0x07;
 291   3                      }
 292   2                      len = 6;
 293   2              }
 294   1              else if((Uart_buff[0] == '#')
 295   1                              && (Uart_buff[1] == 'A')
 296   1                              && (Uart_buff[2] == 'T')
 297   1                              && (Uart_buff[3] == 'T'))
 298   1              {
 299   2                      if(Uart_buff_size < 7)
 300   2                              return 0;
 301   2                      var = String2Long(Uart_buff+5,2);
 302   2                      cmd_msg[28] = var;
 303   2                      len = 7;
 304   2              }
C51 COMPILER V9.60.0.0   CMD                                                               02/14/2020 17:19:11 PAGE 6   

 305   1              else if((Uart_buff[0] == '#')
 306   1                              && (Uart_buff[1] == 'A')
 307   1                              && (Uart_buff[2] == 'A')
 308   1                              && (Uart_buff[3] == 'A'))
 309   1              {
 310   2                      if(Uart_buff_size < 7)
 311   2                              return 0;
 312   2                      var = String2Long(Uart_buff+5,2);
 313   2                      cmd_msg[31] = var;
 314   2                      len = 7;
 315   2              }
 316   1              else if((Uart_buff[0] == '#')
 317   1                              && (Uart_buff[1] == 'P')
 318   1                              && (Uart_buff[2] == 'S')
 319   1                              && (Uart_buff[3] == 'A'))
 320   1              {
 321   2                      if(Uart_buff_size < 7)
 322   2                              return 0;
 323   2                      var = String2Long(Uart_buff+5,2);
 324   2                      cmd_msg[34] = var;
 325   2                      len = 7;
 326   2              }
 327   1              else if((Uart_buff[0] == '#')
 328   1                              && (Uart_buff[1] == 'A')
 329   1                              && (Uart_buff[2] == 'A')
 330   1                              && (Uart_buff[3] == 'B'))
 331   1              {
 332   2                      if(Uart_buff_size < 7)
 333   2                              return 0;
 334   2                      var = String2Long(Uart_buff+5,2);
 335   2                      cmd_msg[32] = var;
 336   2                      len = 7;
 337   2              }
 338   1              else if((Uart_buff[0] == '#')
 339   1                              && (Uart_buff[1] == 'P')
 340   1                              && (Uart_buff[2] == 'S')
 341   1                              && (Uart_buff[3] == 'B'))
 342   1              {
 343   2                      if(Uart_buff_size < 7)
 344   2                              return 0;
 345   2                      var = String2Long(Uart_buff+5,2);
 346   2                      cmd_msg[35] = var;
 347   2                      len = 7;
 348   2              }
 349   1              else if((Uart_buff[0] == '#')
 350   1                              && (Uart_buff[1] == 'A')
 351   1                              && (Uart_buff[2] == 'A')
 352   1                              && (Uart_buff[3] == 'C'))
 353   1              {
 354   2                      if(Uart_buff_size < 7)
 355   2                              return 0;
 356   2                      var = String2Long(Uart_buff+5,2);
 357   2                      cmd_msg[33] = var;
 358   2                      len = 7;
 359   2              }
 360   1              else if((Uart_buff[0] == '#')
 361   1                              && (Uart_buff[1] == 'P')
 362   1                              && (Uart_buff[2] == 'S')
 363   1                              && (Uart_buff[3] == 'C'))
 364   1              {
 365   2                      if(Uart_buff_size < 7)
 366   2                              return 0;
 367   2                      var = String2Long(Uart_buff+5,2);
C51 COMPILER V9.60.0.0   CMD                                                               02/14/2020 17:19:11 PAGE 7   

 368   2                      cmd_msg[36] = var;
 369   2                      len = 7;
 370   2                      CmdCrcCalc();
 371   2                      BuffDel(len);
 372   2                      return 1;
 373   2              }
 374   1              else len = 1;
 375   1      
 376   1              BuffDel(len);
 377   1      
 378   1              return 0;
 379   1      }
 380          
 381          
 382          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2628    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     24      61
   IDATA SIZE       =     40    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
