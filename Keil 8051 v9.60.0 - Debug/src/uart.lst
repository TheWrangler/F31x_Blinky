C51 COMPILER V9.60.0.0   UART                                                              11/13/2020 10:10:45 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\src\uart.OBJ
COMPILER INVOKED BY: d:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe F:\simplicity_st
                    -udo_workspace_v5\F31x_Blinky\src\uart.c OMF2 COMPACT DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZ
                    -E(8,SPEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(D:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.1.7//Device/sha
                    -red/si8051Base;D:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.1.7//Device/C8051F310/inc) PRINT(.\src\uart.lst
                    -) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\uart.OBJ)

line level    source

   1          /*
   2           * uart.c
   3           *
   4           *  Created on: 2020��1��22��
   5           *      Author: wrangler
   6           */
   7          #include <SI_C8051F310_Register_Enums.h>
   8          #include "uart.h"
   9          #include "../sta.h"
  10          #include "../cmd.h"
  11          
  12          unsigned int Uart_Baud = 9600;
  13          unsigned char Uart_Recv_buff[UART_RECV_BUF_NUM];
  14          unsigned char Uart_Recv_buff_size = 0;
  15          extern unsigned char packet_buff[ASCII_FRAME_LEN];
  16          extern unsigned char packet_buff_size;
  17          
  18          extern idata unsigned char sta_msg[STA_MSG_LEN];
  19          extern unsigned char sta_msg_len;
  20          unsigned char sta_msg_send_count = 0;
  21          unsigned char sta_msg_send_complete = 1;
  22          
  23          void UART_Init()
  24          {
  25   1              //8-bit Uart Mode
  26   1              //receive enable
  27   1          SCON0     = 0x10;
  28   1      }
  29          
  30          SI_INTERRUPT(UART0_Interrupt, 4)
  31          {
  32   1              if((SCON0 & 0x01) == 0x01)//receive
  33   1              {
  34   2                      SCON0 &= ~0x01;//clear Recv. INT Flag
  35   2      
  36   2                      if(Uart_Recv_buff_size == UART_RECV_BUF_NUM)
  37   2                              Uart_Recv_buff_size = 0;
  38   2      
  39   2                      Uart_Recv_buff[Uart_Recv_buff_size] = SBUF0;
  40   2                      Uart_Recv_buff_size++;
  41   2      //      if(packet_buff_size == ASCII_FRAME_LEN)
  42   2      //        packet_buff_size = 0;
  43   2      //
  44   2      //      packet_buff[packet_buff_size] = SBUF0;
  45   2      //      packet_buff_size++;
  46   2              }
  47   1      
  48   1              if((SCON0 & 0x02) == 0x02)
  49   1              {
  50   2                      SCON0 &= ~0x02;
  51   2                      if(sta_msg_send_count == sta_msg_len)
  52   2                      {
C51 COMPILER V9.60.0.0   UART                                                              11/13/2020 10:10:45 PAGE 2   

  53   3                              sta_msg_send_complete = 1;
  54   3                              return;
  55   3                      }
  56   2      
  57   2                      SBUF0 = sta_msg[sta_msg_send_count];
  58   2                      sta_msg_send_count++;
  59   2              }
  60   1      }
  61          
  62          void UART_Send()
  63          {
  64   1              sta_msg_send_count = 0;
  65   1              sta_msg_send_complete = 0;
  66   1              SCON0 |= 0x02;
  67   1      }
  68          
  69          void UART_GetBuff(/*unsigned char* pBuf,unsigned char len*/)
  70          {
  71   1              unsigned char i=0,len;
  72   1              unsigned char temp = Uart_Recv_buff_size;
  73   1      
  74   1              if(Uart_Recv_buff_size == 0)
  75   1                      return;
  76   1      
  77   1              len = ASCII_FRAME_LEN - packet_buff_size;
  78   1              if(len > temp)
  79   1                      len = temp;
  80   1      
  81   1              for(i=0;i<len;i++)
  82   1                packet_buff[packet_buff_size + i] = Uart_Recv_buff[i];
  83   1      
  84   1              //atom process
  85   1              temp = Uart_Recv_buff_size - len;
  86   1              Uart_Recv_buff_size = temp;
  87   1              for(i=0;i<temp;i++)
  88   1                      Uart_Recv_buff[i] = Uart_Recv_buff[len + i];
  89   1      
  90   1      
  91   1              packet_buff_size += len;
  92   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    198    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     15    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
